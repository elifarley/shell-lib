#!/usr/bin/env bash
CMD_BASE="$(readlink -f "$0")" || CMD_BASE="$0"; CMD_BASE="$(dirname "$CMD_BASE")"
for lib in base file
  do . "$CMD_BASE"/../lib/"$lib".sh || exit; done
PATH="$CMD_BASE:$PATH"

generate_dockerfiles() {
  local dockerfile_dir="$(readlink -f "${1:-.}")"
  local ptype="$2"
  local base_image="$BASE_IMAGE"

  echo >&2 "Updating '$dockerfile_dir/.dockerignore'..."
  cat >>"$dockerfile_dir"/.dockerignore <<-'EOF'
**~
**.DS_Store
**nohup.out
**.log
.idea
target
coverage
spec
test
.rspec
.rubocop*
EOF

  test ! "$base_image" && test -f "$dockerfile_dir"/Dockerfile && return

  test ! "$base_image" && case "$ptype" in
    ruby)
      base_image='elifarley/docker-rails:rails-4.2.5.1' ;;
    nodejs)
      base_image='elifarley/docker-cep:debian-node-copycontext' ;;
    python)
      base_image='elifarley/docker-dev-env:alpine-sshd-python-2.7' ;;
    jvm*)
      base_image='elifarley/docker-cep:alpine-jdk-8-copycontext' ;;
    bin*)
      base_image='elifarley/docker-cep:alpine-copycontext' ;;
    *)
      echo "Unknown project type: '$ptype'. Try defining an env var 'BASE_IMAGE' or creating a Dockerfile"
      return 1
      ;;
  esac

  cat > "$dockerfile_dir"/Dockerfile <<EOF
FROM $base_image
MAINTAINER https://github.com/elifarley/shell-lib/blob/master/bin/dockerize-project
ENV BASE_IMAGE='$base_image'

EXPOSE 8080
#

EOF
}

generate_dockerfile_and_archive() {
  local project_root="$(readlink -f "${1:-.}")"; shift
  local ptype="$(project-type "$project_root")"
  export PROJECT_TYPE="$ptype"

  local dockerfile_dir="$project_root"
  local tar_params=()
  local all_included=''
  case "$ptype" in
    jvm)
      dockerfile_dir="$project_root"/target
      local gradle_dist
      gradle_dist="$(find 2>/dev/null "$project_root"/build/distributions/ -name '*.tar')"
      test "$gradle_dist" && ptype=jvm:gradle
      ;;
    bin*)
      test -d "$project_root"/target/bin && dockerfile_dir="$project_root"/target
      ;;
  esac

  case "$ptype" in
    jvm:gradle)
      tar_params+=(.); all_included=T
      local app_exec
      tar --strip-components=1 -xf "$gradle_dist" -C "$dockerfile_dir" || return
      app_exec="$(find "$dockerfile_dir"/bin/ -mindepth 1 ! -type d ! -name '*.*')" && test -x "$app_exec" || {
        echo "Unable to find Gradle-generated executable at '$dockerfile_dir/bin/':"
        find "$dockerfile_dir"/bin/ -mindepth 1 ! -type d ! -name '*.*' -exec ls -lhFa {} +
        return 1
      }
      ;;
    jvm)
      # Gradle builds
      dir_not_empty "$project_root"/build/libs/*.?ar && cp "$project_root"/build/libs/*.?ar "$dockerfile_dir"/

      # Remove jar without dependencies if "*-jar-with-dependencies.jar" exists
      test "$(find "$dockerfile_dir"/ -name '*-jar-with-dependencies.jar' -print)" && \
        find "$dockerfile_dir"/ ! -name '*-jar-with-dependencies.jar' -name '*.jar' -exec rm -f {} +

      local jars=("$dockerfile_dir"/*.jar)
      test ${#jars[@]} -gt 1 && tar_params+=("${jars[@]#"$dockerfile_dir"/}") || {
        test -e "$dockerfile_dir"/app.jar || {
          mv "$dockerfile_dir"/*.jar "$dockerfile_dir"/app.jar || return
        }
        tar_params+=(app.jar)
      }
      ;;
    bin*)
        tar_params+=(bin)
        test -d "$dockerfile_dir"/bin || { echo "Missing dir '$dockerfile_dir/bin'"; return 1 ;}
        local executables=("$dockerfile_dir"/bin/*) \
        &&  test ${#executables[@]} -ge 1 \
        && test -e "${executables[0]}" \
        && test ! -e "$dockerfile_dir"/bin/app \
        && \
          ln -s "$(basename "${executables[0]}")" "$dockerfile_dir"/bin/app
        test -e "$dockerfile_dir"/bin/app || { echo "Missing executable in '$dockerfile_dir/bin'"; ls -lhFa "$dockerfile_dir"/bin; return 1 ;}
      ;;
    *) tar_params+=(.); all_included=T ;;
  esac

  case "$ptype" in

    jvm*) test -e "$dockerfile_dir"/app.sh && echo "'app.sh' already exists" || {
      cp -v "$CMD_BASE"/jvm-loader.sh "$dockerfile_dir"/app.sh || return
    } ;;

    bin*) test -e "$dockerfile_dir"/app.sh && echo "'app.sh' already exists" || {
      cat <<-'EOF' > "$dockerfile_dir"/app.sh || return
#!/bin/sh
exec bin/app "$@"
EOF
    } ;;

  esac

  test ! "$all_included" && {

    local appfiles=("$dockerfile_dir"/*app*.sh) && \
    test ${#appfiles[@]} -gt 1 -o -e "$appfiles" && \
      tar_params+=("${appfiles[@]#"$dockerfile_dir"/}")

    test -e "$dockerfile_dir"/config && tar_params+=(config)

  }

  local extra_files='Dockerfile .dockerignore'
  test "$project_root" != "$dockerfile_dir" && \
    for item in $extra_files; do
      test -f "$dockerfile_dir/$item" && continue
      test -f "$project_root/$item" || continue
      cp -v "$project_root/$item" "$dockerfile_dir"
    done

  generate_dockerfiles "$dockerfile_dir" "$ptype" || return

  test "$all_included" || \
    for item in $extra_files; do
      test -f "$dockerfile_dir/$item" && tar_params+=("$item")
    done

  archive-project-artifacts "$dockerfile_dir" . "${tar_params[@]}"
}

test "$DEBUG" && set -x
generate_dockerfile_and_archive "$@"

