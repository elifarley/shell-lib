#!/usr/bin/env bash
CMD_BASE="$(readlink -f $0)" || CMD_BASE="$0"; CMD_BASE="$(dirname $CMD_BASE)"
PATH="$CMD_BASE:$PATH"

generate_dockerfiles() {
  local dockerfile_dir="$(readlink -f "${1:-.}")"; shift
  local ptype="$1"; shift

  cat >"$dockerfile_dir"/.dockerignore <<EOF
**~
.idea
target
coverage
spec
test
.rspec
.rubocop*
**.log
EOF

  test -f "$dockerfile_dir"/Dockerfile && return

  case "$ptype" in
    ruby)
      image_parent='elifarley/docker-rails:rails-4.2.5.1'
      ;;
    jvm)
      image_parent='elifarley/docker-dev-env:debian-openjdk-8-onbuild'
      ;;
    nodejs)
      image_parent='elifarley/docker-dev-env:debian-node-onbuild'
      ;;
    *)
      return 1
  esac

  printf "FROM %s\nMAINTAINER github.com/elifarley/shell-lib\n#\n" "$image_parent" > \
    "$dockerfile_dir"/Dockerfile
}

generate_dockerfile_and_archive() {
  local project_root="$(readlink -f "${1:-.}")"; shift
  local ptype="$(project-type "$project_root")"
  export PROJECT_TYPE="$ptype"

  local dockerfile_dir="$project_root"
  local tar_params=()
  local all_included=''
  case "$ptype" in
    ruby|nodejs)
      tar_params+=(.); all_included=T
      ;;
    jvm)
      dockerfile_dir="$project_root"/target
      local jars=("$project_root"/target/*.jar)
      test ${#jars[@]} -gt 1 && tar_params+=("${jars[@]#"$project_root"/target/}") || {
        mv "$project_root"/target/*.jar "$project_root"/target/app.jar || return
        tar_params+=(app.jar)
      }
      ;;
  esac

  local extra_files='Dockerfile .dockerignore'
  test "$project_root" != "$dockerfile_dir" && \
    for item in $extra_files; do
      test -f "$dockerfile_dir/$item" && continue
      test -f "$project_root/$item" || continue
      cp -v "$project_root/$item" "$dockerfile_dir"
    done

  generate_dockerfiles "$dockerfile_dir" "$ptype" || return

  test "$all_included" || \
    for item in $extra_files; do
      test -f "$dockerfile_dir/$item" && tar_params+=("$item")
    done

  archive-project-artifacts "$dockerfile_dir" . "${tar_params[@]}"
}

test "$DEBUG" && set -x
generate_dockerfile_and_archive "$@"
